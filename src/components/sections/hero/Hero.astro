---
import { Image, Picture } from "astro:assets";
const heroImg = "/images/hero-hero3.jpg";
import CtaButton from "../../shared/CtaButton.astro";
import Container from "../../shared/Container.astro";
import GradiantText from "../../shared/GradiantText.astro";
import SubTitle from "../../shared/SubTitle.astro";
import Title from "../../shared/Title.astro";
import LazyImage from "../../shared/LazyImage.astro";

const heroSection = {
  headline1: "Transformamos el",
  headline2: "Aire",
  headline3: "",
  headline4: "en una herramienta.",
  subheading1: "Más de 45.000 máquinas instaladas a nivel mundial.",
  subheading2:
    "Somos el soporte de Continental Blowers en Chile",
  subheading3: "y en la Región Andina.",
  buttonText: "Solicitar asesoría",
  backgroundImage: "hero-background-image.jpg",
};

export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<section class={`relative ${className} w-full scroll-mt-40 lg:scroll-mt-44 bg-base-100 dark:bg-base-dark-900`} id="hero">
  {/** Background video: lazy-loaded, reduced motion and save-data aware */}
  <div class="pointer-events-none absolute inset-0 z-0 overflow-hidden">
    <video
      id="hero-bg-video"
      class="opacity-0 transition-opacity duration-500 h-full w-full object-cover hidden sm:block"
      muted
      playsinline
      loop
      autoplay
      aria-hidden="true"
      preload="none"
      poster={heroImg}
    >
    </video>
    <div class="absolute inset-0 bg-black/40 backdrop-blur-sm"></div>
  </div>
  <Container size="wide">
    <div class="pt-28 md:pt-32 lg:pt-40 pb-6 md:pb-8 lg:pb-10 relative z-10">
      <div class="grid grid-cols-1 items-center gap-6 md:gap-10">
      <div
        class="order-1 flex flex-col items-center md:items-start text-center md:text-left px-6 md:px-10 text-white"
      >
        <Title as="div" className="!text-3xl sm:!text-4xl md:!text-6xl lg:!text-7xl text-white">
          {heroSection.headline1}
          <GradiantText>
            {" " + heroSection.headline2}
            <br />
            {" " + heroSection.headline3}
          </GradiantText>
          {heroSection.headline4}
        </Title>
        <SubTitle className="mt-6 md:mt-8 leading-relaxed italic max-w-xl text-white/90">
          {heroSection.subheading1}
          <br />
          {heroSection.subheading2}
          <br />
          {heroSection.subheading3}
        </SubTitle>
        <div class="pt-6 md:pt-8">
          <CtaButton>{heroSection.buttonText}</CtaButton>
        </div>
      </div>
      </div>
    </div>
  </Container>
  <script>
    // @ts-nocheck
    // Lazy-load background video with format and size selection.
    (function () {
      const el = document.getElementById('hero-bg-video');
      if (!(el instanceof HTMLVideoElement)) return;

      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      const navAny = navigator;
      const saveData = !!(navAny && navAny.connection && navAny.connection.saveData);
      if (prefersReducedMotion || saveData) return; // Respect user preferences

      const container = document.getElementById('hero') || el;
      const isMobile = window.matchMedia('(max-width: 640px)').matches;
      if (isMobile) return; // Mobile: do not load video, use background image instead

      const canPlay = (type) => typeof el.canPlayType === 'function' && el.canPlayType(type) !== '';

      function buildCandidates() {
        const bases = isMobile ? ['parte1-mobile', 'parte1'] : ['parte1'];
        const formats = [
          { ext: 'webm', type: 'video/webm' },
          { ext: 'mp4', type: 'video/mp4' },
        ].filter(f => canPlay(f.type));
        const urls = [];
        for (const base of bases) {
          for (const f of formats) urls.push(`/videos/${base}.${f.ext}`);
        }
        return urls;
      }

      function loadAndPlay() {
        const candidates = buildCandidates();
        let idx = 0;

        function tryNext() {
          if (idx >= candidates.length) return; // give up; poster remains
          const url = candidates[idx++];
          el.onerror = () => tryNext();
          el.onloadeddata = () => {
            el.onerror = null;
            el.onloadeddata = null;
            el.classList.remove('opacity-0');
            const p = el.play?.();
            if (p && typeof p.catch === 'function') p.catch(() => {});
          };
          el.src = url;
          el.load();
        }

        tryNext();
      }

      const io = new IntersectionObserver((entries) => {
        for (const entry of entries) {
          if (entry.isIntersecting) {
            loadAndPlay();
            io.disconnect();
            break;
          }
        }
      }, { rootMargin: '200px' });

      io.observe(container);
    })();
  </script>

  <style>
    /* Ensure section has a visual fallback via poster until video loads */
    :global(#hero) {
      background-image: url({heroImg});
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }
    /* Mobile: use the provided slider image, no video */
    @media (max-width: 640px) {
      :global(#hero) {
        background-image: url('/images/slider-bg3.webp');
      }
    }
    @media (prefers-reduced-motion: reduce) {
      :global(#hero) {
        background-attachment: scroll;
      }
    }
  </style>
</section>
