---
import type { ImageMetadata } from "astro";
import { Picture } from "astro:assets";
import { getImage } from "astro:assets";

export interface Props {
  src: any;
  alt: string;
  className?: string;
  width?: number | string;
  height?: number | string;
  [key: string]: any;
}

const { src, alt, className = "", width, height, ...attrs } = Astro.props as Props;

const isStringSrc = typeof src === "string";

let dimensions = {
  width: width ? Number(width) : undefined,
  height: height ? Number(height) : undefined,
};

let placeholderBackgroundSrc: string | null = null;

if (!isStringSrc) {
  const originalDimensions = {
    width: (src as ImageMetadata).width,
    height: (src as ImageMetadata).height,
  };

  if (dimensions.width && !dimensions.height) {
    dimensions.height = Math.round(
      (dimensions.width / originalDimensions.width) * originalDimensions.height
    );
  } else if (dimensions.height && !dimensions.width) {
    dimensions.width = Math.round(
      (dimensions.height / originalDimensions.height) * originalDimensions.width
    );
  } else if (!dimensions.width && !dimensions.height) {
    dimensions = {
      width: originalDimensions.width,
      height: originalDimensions.height,
    };
  }

  const aspectRatio = originalDimensions.width / originalDimensions.height;
  const placeholderWidth = 15;
  const placeholderHeight = Math.round(placeholderWidth / aspectRatio);

  const placeholderBackground = await getImage({
    src: src as ImageMetadata,
    format: "webp",
    width: placeholderWidth,
    height: placeholderHeight,
  });
  placeholderBackgroundSrc = placeholderBackground.src;
}
---

{isStringSrc ? (
  <img
    src={src as string}
    alt={alt}
    class={className}
    decoding="async"
    loading="lazy"
    height={dimensions.height}
    width={dimensions.width}
    {...(attrs as any)}
  />
) : (
  <Picture
    src={src as ImageMetadata}
    alt={alt}
    formats={["avif", "webp"]}
    class={className}
    decoding="async"
    loading="lazy"
    style={{
      backgroundImage: placeholderBackgroundSrc ? `url(${placeholderBackgroundSrc})` : undefined,
      backgroundSize: "cover",
    }}
    densities={["3x"]}
    height={dimensions.height}
    width={dimensions.width}
    {...(attrs as any)}
  />
)}
